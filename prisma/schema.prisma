// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}


// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}


model Product {
  id          String     @id @default(cuid()) @map("_id")
  description String     @db.Text
  imageUrl    String     @db.VarChar(255) @map("image_url")
  name        String  
  price       Int         


  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime   @updatedAt
  // this cartItem references the cartItem model allowing 
  CartItem    CartItem[]

  @@map("products")
}

model Cart{
  id String @id @default(cuid()) @map("_id")
  // the CartItem will allow us to fetch other items that belong to the same cart
  items CartItem[] 

//   items     CartItem[] 
//   userId    String?    @db.ObjectId
//   user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("carts")
}

model CartItem {
  id        String  @id @default(cuid()) @map("_id") 
  productId String    
  // this product is the relation we have to the Product itself through productId 
  //notice how ew used the firld to be productId referencing hte id of hte product
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  cartId    String  
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)

  @@map("cart_items")

  @@index([productId])
  @@index([cartId])
}

// model Account {
//   id                String  @id @default(auto()) @map("_id") @db.ObjectId
//   userId            String  @db.ObjectId
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String? @db.String
//   access_token      String? @db.String
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String? @db.String
//   session_state     String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
//   @@map("accounts")
// }

// model Session {
//   id           String   @id @default(auto()) @map("_id") @db.ObjectId
//   sessionToken String   @unique
//   userId       String   @db.ObjectId
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@map("sessions")
// }

// model User {
//   id            String    @id @default(auto()) @map("_id") @db.ObjectId
//   name          String?
//   email         String?   @unique
//   emailVerified DateTime?
//   image         String?
//   accounts      Account[]
//   sessions      Session[]
//   Cart          Cart[]

//   @@map("users")
// }

// model VerificationToken {
//   id         String   @id @default(auto()) @map("_id") @db.ObjectId
//   identifier String
//   token      String   @unique
//   expires    DateTime

//   @@unique([identifier, token])
//   @@map("verificationtokens")
// }